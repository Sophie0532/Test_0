
Option Explicit

Public GLOBAL_CLIENT As String
Public GLOBAL_SN As String



'MÃ©todo que establece los valores iniciales de los elementos del token y lo mueve a la bandeja de entrada
Public Function Athena_Token_Init(mailItem As Outlook.mailItem, campos() As String, Optional status_init As String = Athena_Mail_Status_NoClassify, Optional idDuty As String = "-1") As Outlook.mailItem
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    Dim inboxFolder As Outlook.Folder: Set inboxFolder = Get_Inbox_Folder(Outlook.Application.ActiveExplorer.currentFolder)
    Dim token As Outlook.mailItem
    ' Create Mail (Token)
    If mailItem Is Nothing Then
        ' mailItem (Empty) ==> Manual (Classifying / Planned)
        Set token = Outlook.Application.CreateItem(olMailItem).Move(inboxFolder)
        token.BodyFormat = olFormatRichText
        token.body = ""
    Else
        ' mailItem* ==> Reply
        Set token = mailItem.Reply.Move(inboxFolder)
        token.Subject = mailItem.Subject
        token.BodyFormat = olFormatRichText
        token.body = ""
    End If
    
    ' Set it up
    Athena_Token_Update_Mail mailItem, token, campos, status_init, idDuty
    
    Set inboxFolder = Nothing
    Set Athena_Token_Init = token
End Function

' Returns Parsed emailbody as JSON structure (Dictionary)
' String (json) -> Dictionary
Public Function Athena_Token_Read_JSON(tokenStr As String) As Object ' Dictionary
    Set Athena_Token_Read_JSON = Athena_cJSON.ParseJson(tokenStr)
End Function

'Establece Icono de Status dado un token y un estado.
Private Sub Athena_Token_Update_Icon(ByRef token As Outlook.mailItem, status As Integer)
    Select Case status    ' Evaluate Number.
        Case Athena_Mail_StatusCod_NoClassify    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_NoClassify
        Case Athena_Mail_StatusCod_Started    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_Started
        Case Athena_Mail_StatusCod_Stopped    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_Stopped
        Case Athena_Mail_StatusCod_NoStart    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_NoStart
        Case Athena_Mail_StatusCod_End    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_End
        Case Athena_Mail_StatusCod_UnAssigned    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_UnAssigned
        Case Athena_Mail_StatusCod_Discarted    ' Number between 1 and 5, inclusive.
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", Athena_Mail_StatusIcon_Discarted
        Case Else
            token.PropertyAccessor.SetProperty "http://schemas.microsoft.com/mapi/proptag/0x10800003", 428
    End Select
End Sub

'Actualiza token (atributos y body)
Public Sub Athena_Token_Update_Mail(mailItem As Outlook.mailItem, ByRef token As Outlook.mailItem, campos() As String, duty_status As String, idDuty As String)
On Error GoTo ErrHndlr
    ' Set Mail_Icon
    Athena_Token_Update_Icon token, getStatusCod(duty_status)
    
    ' Set Token Body
    Athena_Token_set_body token, campos, duty_status, idDuty
        
    ' Set Mail Fields (To / CC / BCC ..)
    If VariantSize(campos) > 0 Then
        Athena_Mail_set_Owner token, "" & campos(CAMPO_USER), "" & campos(CAMPO_USER_COD)
        Athena_Mail_set_IdDuty token, idDuty
        If token.Subject <> campos(CAMPO_TITLE_FULL) Then Athena_Mail_set_desc token, "" & token.Subject
        Athena_Mail_set_title token, campos(CAMPO_TITLE_FULL)
        Athena_Mail_set_status token, duty_status
        Athena_Mail_set_priority token, campos(CAMPO_PRIORITY)
        Athena_Mail_set_canal token, "" & campos(CAMPO_CANAL)
        'Athena_Mail_set_client token, campos(CAMPO_CLIENT)

    Else
        Athena_Mail_set_Owner token, Athena_Mail_Owner_UnAssigned, Athena_Mail_OwnerCod_UnAssigned
        Athena_Mail_set_IdDuty token, idDuty
        If token.Subject = "" Then Athena_Mail_set_title token, Athena_Mail_Desc_Manual & " " & Format(Now, Athena_FullTime_Pattern)
        Athena_Mail_set_status token, duty_status
    End If
    
    ' Set Mail Custom Columns
    Athena_Token_set_custom_columns token, campos
    
ErrHndlr:
    If Err Then Traza lgFATAL, Err.Number & " " & Err.Description, "Athena_Token_Update_Mail"
    token.Save
    token.Close (olSave)
    
    ' If Subject changes from original mail, merge it back to main conversation
    If Not mailItem Is Nothing Then Athena_Mail_set_conversation token, mailItem.ConversationTopic, mailItem.PropertyAccessor.GetProperty(PR_CONVERSATION_INDEX)
End Sub

' Returns Updated JSON once a pre-token is classified
Private Sub Athena_Token_Update_JSON(ByRef token As Outlook.mailItem, ByRef jsonDict As Dictionary, campos() As String, duty_status As String, idDuty As String)
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    Athena_Token_check_first_json jsonDict, "" & idDuty, "" & campos(CAMPO_TITLE_FULL), "" & token.Subject
    Athena_Token_check_category_json jsonDict, "" & campos(CAMPO_CATEGORY_COD), "" & campos(CAMPO_CATEGORY), "" & campos(CAMPO_AREA), "" & campos(CAMPO_AREA_COD), "" & campos(CAMPO_COUNTRY), "" & campos(CAMPO_COUNTRY_COD), "" & campos(CAMPO_MATRIX_UNITS)
    Athena_Token_check_priority_json jsonDict, "" & campos(CAMPO_PRIORITY), "" & campos(CAMPO_PRIORITY_COD)
    'Athena_Token_check_client_json jsonDict, "" & campos(CAMPO_CLIENT), "" & campos(CAMPO_CLIENT_COD)
    Athena_Token_check_owner_json jsonDict, "" & campos(CAMPO_USER_EMPLOYEE), "" & campos(CAMPO_USER_COD)
    Athena_Token_check_volumen_json jsonDict, "" & campos(CAMPO_NUM_ACTIONS)
    Athena_Token_check_origin_json jsonDict, "" & campos(CAMPO_ORIGIN), "" & campos(CAMPO_ORIGIN_COD)
    Athena_Token_check_notes_json jsonDict, "" & campos(CAMPO_COMMENT)
    Athena_Token_check_canal_json jsonDict, "" & campos(CAMPO_CANAL)
    
    'Check Status
    If CBool(campos(CAMPO_TIME_ADJUST)) Then
        Athena_Token_check_status_json jsonDict, token.CC, Athena_Mail_Status_Started, True, "" & campos(CAMPO_TIME_START)
        Athena_Token_check_status_json jsonDict, token.CC, duty_status, True, "" & campos(CAMPO_TIME_END)
    ElseIf (CBool(campos(CAMPO_POSTPONED)) Or CBool(campos(CAMPO_REASSIGNED))) And duty_status <> Athena_Mail_Status_UnAssigned Then
        Athena_Token_check_status_json jsonDict, token.CC, Athena_Mail_Status_Started, False, "" & Format(DateAdd("s", -1, t), Athena_FullTime_Pattern)
        Athena_Token_check_status_json jsonDict, token.CC, duty_status, False, t
    Else
        Athena_Token_check_status_json jsonDict, token.CC, duty_status, False, t
    End If
    
    Athena_Token_check_tags jsonDict, "" & campos(CAMPO_PK), "" & campos(CAMPO_TAG)
    Athena_Token_check_times_json jsonDict, Format(token.CreationTime, Athena_FullTime_Pattern), "" & campos(CAMPO_MAIL_STAMP), t
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & campos(CAMPO_AREA_COD), getPath(token)
    
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
End Sub

Sub Athena_Token_edit_json(ByRef token As Outlook.mailItem, campos() As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    ' Json Fields >> Call Update_Mail???
    Athena_Token_check_first_json jsonDict, "", token.Subject, "" & campos(CAMPO_COMMENT)
    Athena_Token_check_category_json jsonDict, "" & campos(CAMPO_CATEGORY_COD), "" & campos(CAMPO_CATEGORY), "" & campos(CAMPO_AREA), "" & campos(CAMPO_AREA_COD), "" & campos(CAMPO_COUNTRY), "" & campos(CAMPO_COUNTRY_COD), "" & campos(CAMPO_MATRIX_UNITS)
    Athena_Token_check_priority_json jsonDict, "" & campos(CAMPO_PRIORITY), "" & campos(CAMPO_PRIORITY_COD)
   ' Athena_Token_check_client_json jsonDict, "" & campos(CAMPO_CLIENT), "" & campos(CAMPO_CLIENT_COD)
    Athena_Token_check_volumen_json jsonDict, "" & campos(CAMPO_NUM_ACTIONS)
    Athena_Token_check_notes_json jsonDict, "" & campos(CAMPO_COMMENT)
    Athena_Token_check_canal_json jsonDict, "" & campos(CAMPO_CANAL)
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
    
    ' Mail Fields
    Athena_Mail_set_priority token, "" & campos(CAMPO_PRIORITY)
    'Athena_Mail_set_client token, "" & campos(CAMPO_CLIENT)
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    ' Set Mail Custom Columns
    Athena_Token_set_custom_columns token, campos
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    Athena_Mail_set_canal token, "" & campos(CAMPO_CANAL)
    token.Save
    
    Set jsonDict = Nothing
End Sub

Private Function getEmptyEvents() As Variant
    Dim newEvents As Variant
    ReDim newEvents(0 To 0) As Variant
    getEmptyEvents = newEvents
End Function

Private Sub Athena_Token_init_json(ByRef jsonDict As Dictionary)
    Athena_Token_init_first_json jsonDict
    Athena_Token_init_category_json jsonDict
    Athena_Token_init_notes_json jsonDict
    Athena_Token_init_status_json jsonDict
    Athena_Token_init_owner_json jsonDict
    Athena_Token_init_priority_json jsonDict
    Athena_Token_init_client_json jsonDict
    Athena_Token_init_volumen_json jsonDict
    Athena_Token_init_origin_json jsonDict
    Athena_Token_init_ticket_json jsonDict
    Athena_Token_init_incident_json jsonDict
    Athena_Token_init_trace_json jsonDict
    Athena_Token_init_marks_json jsonDict
    Athena_Token_init_times_json jsonDict
End Sub

Private Sub Athena_Token_init_incident_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_INCIDENT_OP) Then jsonDict.Add TOKEN_INCIDENT_OP, ""
    If Not jsonDict.Exists(TOKEN_VOLUMEN_ERROR) Then jsonDict.Add TOKEN_VOLUMEN_ERROR, ""
    If Not jsonDict.Exists(TOKEN_COMUNICA) Then jsonDict.Add TOKEN_COMUNICA, ""
End Sub

Private Sub Athena_Token_init_ticket_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_EVENTS_TICKET) Then jsonDict.Add TOKEN_EVENTS_TICKET, getEmptyEvents
End Sub

Private Sub Athena_Token_init_category_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_AREA) Then jsonDict.Add TOKEN_AREA, ""
    If Not jsonDict.Exists(TOKEN_UNIT) Then jsonDict.Add TOKEN_UNIT, ""
    If Not jsonDict.Exists(TOKEN_CAT) Then jsonDict.Add TOKEN_CAT, ""
    If Not jsonDict.Exists(TOKEN_AREA_COD) Then jsonDict.Add TOKEN_AREA_COD, ""
    If Not jsonDict.Exists(TOKEN_UNIT_COD) Then jsonDict.Add TOKEN_UNIT_COD, ""
    If Not jsonDict.Exists(TOKEN_CAT_COD) Then jsonDict.Add TOKEN_CAT_COD, ""
    If Not jsonDict.Exists(TOKEN_EVENTS_CAT) Then jsonDict.Add TOKEN_EVENTS_CAT, getEmptyEvents
    If Not jsonDict.Exists(TOKEN_MATRIX_UNITS) Then jsonDict.Add TOKEN_MATRIX_UNITS, ""
    If Not jsonDict.Exists(TOKEN_MATRIX_CAT_PRCT) Then jsonDict.Add TOKEN_MATRIX_CAT_PRCT, getEmptyEvents
End Sub

Private Sub Athena_Token_init_volumen_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_VOLUMEN) Then jsonDict.Add TOKEN_VOLUMEN, ""
    If Not jsonDict.Exists(TOKEN_EVENTS_VOLUMEN) Then jsonDict.Add TOKEN_EVENTS_VOLUMEN, getEmptyEvents
End Sub

Private Sub Athena_Token_init_priority_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_PRIORITY) Then jsonDict.Add TOKEN_PRIORITY, Athena_Mail_Priority_Cliente
    If Not jsonDict.Exists(TOKEN_PRIORITY_COD) Then jsonDict.Add TOKEN_PRIORITY_COD, Athena_Mail_PriorityCod_Normal
    If Not jsonDict.Exists(TOKEN_EVENTS_PRIORITY) Then jsonDict.Add TOKEN_EVENTS_PRIORITY, Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(getEmptyEvents, Athena_Mail_Priority_Cliente, False, Athena_Mail_PriorityCod_Normal))
End Sub

Private Sub Athena_Token_init_client_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_CLIENT) Then jsonDict.Add TOKEN_CLIENT, ""
    
End Sub
Private Sub Athena_Token_init_canal_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_CANAL) Then jsonDict.Add TOKEN_CANAL, ""
    
End Sub
Private Sub Athena_Token_init_owner_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_OWNER) Then jsonDict.Add TOKEN_OWNER, getUserLogin
    If Not jsonDict.Exists(TOKEN_OWNER_COD) Then jsonDict.Add TOKEN_OWNER_COD, getUserCod(jsonDict(TOKEN_OWNER))
    If Not jsonDict.Exists(TOKEN_EVENTS_OWNER) Then jsonDict.Add TOKEN_EVENTS_OWNER, getEmptyEvents
End Sub

Private Sub Athena_Token_init_status_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_STATUS) Then jsonDict.Add TOKEN_STATUS, getEmptyEvents
    If Not jsonDict.Exists(TOKEN_STATUS_COD) Then jsonDict.Add TOKEN_STATUS_COD, ""
    If Not jsonDict.Exists(TOKEN_EVENTS_STATUS) Then jsonDict.Add TOKEN_EVENTS_STATUS, getEmptyEvents
End Sub

Private Sub Athena_Token_init_notes_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_NOTES) Then jsonDict.Add TOKEN_NOTES, ""
End Sub


Private Sub Athena_Token_init_times_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_LAST_UPDATE_STAMP) Then jsonDict.Add TOKEN_LAST_UPDATE_STAMP, ""
    If Not jsonDict.Exists(TOKEN_TOKEN_STAMP) Then jsonDict.Add TOKEN_TOKEN_STAMP, ""
    If Not jsonDict.Exists(TOKEN_MAIL_STAMP) Then jsonDict.Add TOKEN_MAIL_STAMP, ""
    If Not jsonDict.Exists(TOKEN_DUTY_STAMP) Then jsonDict.Add TOKEN_DUTY_STAMP, ""
End Sub

Private Sub Athena_Token_init_marks_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_PK) Then jsonDict.Add TOKEN_PK, ""
    If Not jsonDict.Exists(TOKEN_TAG) Then jsonDict.Add TOKEN_TAG, getEmptyEvents
    If Not jsonDict.Exists(TOKEN_INDEX) Then jsonDict.Add TOKEN_INDEX, getEmptyEvents
End Sub

Private Sub Athena_Token_init_first_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_TASK_ID) Then jsonDict.Add TOKEN_TASK_ID, -1
    If Not jsonDict.Exists(TOKEN_TITLE) Then jsonDict.Add TOKEN_TITLE, ""
    If Not jsonDict.Exists(TOKEN_COMMENT) Then jsonDict.Add TOKEN_COMMENT, ""
End Sub

Private Sub Athena_Token_init_origin_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_ORIGIN) Then jsonDict.Add TOKEN_ORIGIN, ""
    If Not jsonDict.Exists(TOKEN_ORIGIN_COD) Then jsonDict.Add TOKEN_ORIGIN_COD, ""
End Sub

Private Sub Athena_Token_init_trace_json(ByRef jsonDict As Dictionary)
    If Not jsonDict.Exists(TOKEN_CONVERSATION_ID) Then jsonDict.Add TOKEN_CONVERSATION_ID, ""
    If Not jsonDict.Exists(TOKEN_ENTRY_ID) Then jsonDict.Add TOKEN_ENTRY_ID, ""
    If Not jsonDict.Exists(TOKEN_DB_FILE) Then jsonDict.Add TOKEN_DB_FILE, ""
    If Not jsonDict.Exists(TOKEN_MAILBOX) Then jsonDict.Add TOKEN_MAILBOX, ""
    If Not jsonDict.Exists(TOKEN_PATH) Then jsonDict.Add TOKEN_PATH, ""
    If Not jsonDict.Exists(TOKEN_SYNCHRO) Then jsonDict.Add TOKEN_SYNCHRO, "N"
End Sub

Private Sub Athena_Token_check_first_json(ByRef jsonDict As Dictionary, taskid As String, title As String, comment As String)
    Athena_Token_init_first_json jsonDict

    If jsonDict(TOKEN_TASK_ID) <> taskid And taskid <> "" Then jsonDict(TOKEN_TASK_ID) = taskid
    
    If jsonDict(TOKEN_TITLE) <> title And title <> "" Then jsonDict(TOKEN_TITLE) = clearString(title)
    If jsonDict(TOKEN_COMMENT) <> Trim(comment) And Trim(comment) <> "" And title <> comment Then jsonDict(TOKEN_COMMENT) = clearString(comment)
End Sub

Private Sub Athena_Token_check_category_json(ByRef jsonDict As Dictionary, area_dept_cat_cod As String, category As String, area As String, area_cod As String, unit As String, unit_cod As String, matrix_unit As String)
    Athena_Token_init_category_json jsonDict
    If jsonDict(TOKEN_CAT_COD) <> area_dept_cat_cod And area_dept_cat_cod <> "" Then
        If jsonDict(TOKEN_CAT) <> category And category <> "" Then jsonDict(TOKEN_CAT) = category
        If jsonDict(TOKEN_CAT_COD) <> area_dept_cat_cod And area_dept_cat_cod <> "" Then jsonDict(TOKEN_CAT_COD) = area_dept_cat_cod
        If jsonDict(TOKEN_AREA) <> area And area <> "" Then jsonDict(TOKEN_AREA) = area
        If jsonDict(TOKEN_AREA_COD) <> area_cod And area_cod <> "" Then jsonDict(TOKEN_AREA_COD) = area_cod
        If jsonDict(TOKEN_UNIT) <> unit And unit <> "" Then jsonDict(TOKEN_UNIT) = unit
        If jsonDict(TOKEN_UNIT_COD) <> unit_cod And unit_cod <> "" Then jsonDict(TOKEN_UNIT_COD) = unit_cod
        
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_CAT))
        jsonDict(TOKEN_EVENTS_CAT) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, area_dept_cat_cod, False, ""))
    End If
    ' 1Âº matriz CAT / Unit
    Athena_Token_check_matrix_json jsonDict, matrix_unit
    ' 2Âº List Multi Unit
    If jsonDict(TOKEN_UNIT) = UNIT_CROSS And jsonDict(TOKEN_MATRIX_UNITS) <> matrix_unit And matrix_unit <> "" Then jsonDict(TOKEN_MATRIX_UNITS) = matrix_unit
    If jsonDict(TOKEN_UNIT) <> UNIT_CROSS Then jsonDict(TOKEN_MATRIX_UNITS) = matrix_unit
End Sub

Private Sub Athena_Token_set_category_matrix_json(ByRef jsonDict As Dictionary, units As Variant)
    Athena_Token_init_category_json jsonDict
    'If jsonDict(TOKEN_CAT_COD) <> area_dept_cat_cod And area_dept_cat_cod <> "" Then
    'End If
End Sub

Private Sub Athena_Token_check_volumen_json(ByRef jsonDict As Dictionary, volumen As String)
    Athena_Token_init_volumen_json jsonDict
    If jsonDict(TOKEN_VOLUMEN) <> volumen And volumen <> "" And esNumeroAccionesValido(volumen) Then
        jsonDict(TOKEN_VOLUMEN) = volumen
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_VOLUMEN))
        jsonDict(TOKEN_EVENTS_VOLUMEN) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, volumen, False, ""))
    End If
End Sub

Private Sub Athena_Token_check_matrix_units_json(ByRef jsonDict As Dictionary, area_dept_cat_cod As String)
    Athena_Token_init_category_json jsonDict
    ' Read Units
    Dim matrix_units As String
    Dim result As Variant: result = DB_DQL(DDBB_Athena_local_file_path & DDBB_Athena_file, ATHENA_GET_QUERY_GET_CATEGORIES_AND_UNITS_FROM_CROSS(area_dept_cat_cod), verbose)
    ' Multi_Unit
    If VariantSize(result) > 0 Then
        Dim i As Integer
        For i = 0 To VariantSize(result) - 1
            matrix_units = matrix_units & result(i)(0) & SEP_TOKEN
        Next
        matrix_units = Left(matrix_units, Len(matrix_units) - 1)
    End If
    jsonDict(TOKEN_MATRIX_CAT_PRCT) = matrix_units
End Sub

Private Sub Athena_Token_check_matrix_json(ByRef jsonDict As Dictionary, matrix_units As String)
    Athena_Token_init_category_json jsonDict
    Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_MATRIX_CAT_PRCT))
    
    'If (matrix_units  <> "" And VariantSize(newEvents) = 0) Then
    Dim Sql As String
    If jsonDict(TOKEN_CAT_COD) <> "-1" Then
        Sql = ATHENA_GET_QUERY_GET_CATEGORIES_AND_UNITS_FROM_CROSS(jsonDict(TOKEN_CAT_COD), True)
    Else
        Sql = ATHENA_GET_QUERY_GET_CATEGORIES_FROM_UNITS_CATEGORY("" & jsonDict(TOKEN_AREA_COD), matrix_units, jsonDict(TOKEN_CAT))
    End If
    newEvents = DB_DQL(DDBB_Athena_file_path & DDBB_Athena_file, Sql, verbose)
    If VariantSize(newEvents(0)) = 0 Or matrix_units = "" Then
        jsonDict(TOKEN_MATRIX_CAT_PRCT) = getEmptyEvents
    Else
        jsonDict(TOKEN_MATRIX_CAT_PRCT) = Athena_Token_Convert_Events_JSON(newEvents)
    End If
    'End If
    
End Sub

Private Sub Athena_Token_check_origin_json(ByRef jsonDict As Dictionary, origin As String, origin_cod As String)
    Athena_Token_init_origin_json jsonDict
    If jsonDict(TOKEN_ORIGIN) <> origin And origin <> "" Then jsonDict(TOKEN_ORIGIN) = origin
    If jsonDict(TOKEN_ORIGIN_COD) <> origin_cod And origin_cod <> "" Then jsonDict(TOKEN_ORIGIN_COD) = origin_cod
End Sub

Private Sub Athena_Token_check_priority_json(ByRef jsonDict As Dictionary, priority As String, priority_cod As String)
    Athena_Token_init_priority_json jsonDict
    If jsonDict(TOKEN_PRIORITY) <> priority Then
        jsonDict(TOKEN_PRIORITY) = priority
        jsonDict(TOKEN_PRIORITY_COD) = priority_cod
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_PRIORITY))
        jsonDict(TOKEN_EVENTS_PRIORITY) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, priority, False, priority_cod))
    End If
End Sub

Private Sub Athena_Token_check_owner_json(ByRef jsonDict As Dictionary, owner As String, owner_cod As String)
    Athena_Token_init_owner_json jsonDict
    If owner_cod <> -1 And (jsonDict(TOKEN_OWNER) <> owner Or VariantDictSize(jsonDict(TOKEN_EVENTS_OWNER)) = 0) Then
        jsonDict(TOKEN_OWNER) = owner
        jsonDict(TOKEN_OWNER_COD) = owner_cod
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_OWNER))
        jsonDict(TOKEN_EVENTS_OWNER) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, owner, False, owner_cod))
    End If
End Sub

Private Sub Athena_Token_check_status_json(ByRef jsonDict As Dictionary, status_prev As String, status As String, isAdj As Boolean, t_stamp As String)
    Athena_Token_init_status_json jsonDict
    If status_prev <> status Then
        jsonDict(TOKEN_STATUS) = Split(status, ";")
        jsonDict(TOKEN_STATUS_COD) = getStatusCod(status)
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_STATUS))
        jsonDict(TOKEN_EVENTS_STATUS) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, status, isAdj, t_stamp))
    End If
End Sub

Private Sub Athena_Token_check_notes_json(ByRef jsonDict As Dictionary, notes As String)
    Athena_Token_init_notes_json jsonDict
    Dim msg As String: msg = Left(Trim(clearString(notes)), 250)
    If msg <> "" Then
        Dim newEvents As Variant: newEvents = Athena_Token_read_Events_JSON(jsonDict(TOKEN_NOTES))
        jsonDict(TOKEN_NOTES) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(newEvents, msg, False, ""))
    End If
End Sub

Private Sub Athena_Token_check_times_json(ByRef jsonDict As Dictionary, token_stamp As String, mail_stamp As String, duty_stamp)
    Athena_Token_init_times_json jsonDict
    
    If jsonDict(TOKEN_TOKEN_STAMP) = "" And token_stamp <> "" Then jsonDict(TOKEN_TOKEN_STAMP) = token_stamp
    If jsonDict(TOKEN_MAIL_STAMP) = "" And mail_stamp <> "" Then jsonDict(TOKEN_MAIL_STAMP) = mail_stamp
    If jsonDict(TOKEN_DUTY_STAMP) = "" And duty_stamp <> "" Then jsonDict(TOKEN_DUTY_STAMP) = duty_stamp
End Sub

Private Sub Athena_Token_check_trace_json(ByRef jsonDict As Dictionary, token As Outlook.mailItem)
    Athena_Token_init_trace_json jsonDict
    
    If jsonDict(TOKEN_CONVERSATION_ID) <> token.ConversationID Then jsonDict(TOKEN_CONVERSATION_ID) = token.ConversationID
    If jsonDict(TOKEN_ENTRY_ID) <> token.EntryId Then jsonDict(TOKEN_ENTRY_ID) = token.EntryId
    
    If jsonDict(TOKEN_CONVERSATION_ID) = "" Then jsonDict(TOKEN_CONVERSATION_ID) = jsonDict(TOKEN_TASK_ID)
    If jsonDict(TOKEN_ENTRY_ID) = "" Then jsonDict(TOKEN_ENTRY_ID) = jsonDict(TOKEN_TASK_ID)
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
End Sub

Private Sub Athena_Token_check_db_json(ByRef jsonDict As Dictionary, mailbox As String, area_dept_cat_cod As String, path As String)
    Dim setDb As Boolean
    Athena_Token_init_trace_json jsonDict
    
    If jsonDict(TOKEN_MAILBOX) = "" And mailbox <> "" Then jsonDict(TOKEN_MAILBOX) = mailbox
    If jsonDict(TOKEN_PATH) = "" And path <> "" Then jsonDict(TOKEN_PATH) = path
    If (jsonDict(TOKEN_DB_FILE) = "" Or jsonDict(TOKEN_DB_FILE) = "ATHENA_NET_DATA.db") And jsonDict(TOKEN_MAILBOX) <> "" And jsonDict(TOKEN_AREA_COD) <> "" Then jsonDict(TOKEN_DB_FILE) = DDBB_Athena_file_data_dept(jsonDict(TOKEN_MAILBOX), jsonDict(TOKEN_AREA_COD))
    If jsonDict(TOKEN_SYNCHRO) = "" Then jsonDict(TOKEN_SYNCHRO) = "N"
End Sub
Private Sub Athena_Token_check_canal_json(ByRef jsonDict As Dictionary, canal As String)
    Athena_Token_init_canal_json jsonDict
    If jsonDict(TOKEN_CANAL) <> canal And canal <> "" Then
        jsonDict(TOKEN_CANAL) = canal
    End If
End Sub
Private Sub Athena_Token_check_tags(ByRef jsonDict As Dictionary, pk As String, tag As String)
On Error GoTo ErrHndlr
    Athena_Token_init_marks_json jsonDict
    
    If jsonDict(TOKEN_PK) = "" Then jsonDict(TOKEN_PK) = pk
    If jsonDict(TOKEN_TAG) = "" Then jsonDict(TOKEN_TAG) = tag
ErrHndlr:
End Sub

Public Function Athena_Token_set_db(ByRef token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_trace_json jsonDict
    
    If (jsonDict(TOKEN_DB_FILE) = "" Or jsonDict(TOKEN_DB_FILE) = "ATHENA_NET_DATA.db") Then
        Athena_Token_check_db_json jsonDict, getMailBox(token), Athena_Token_get_AreaDeptCod(token), getPath(token)
        token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
        token.Save
    End If
ErrHndlr:
    Athena_Token_set_db = jsonDict(TOKEN_DB_FILE)
    Set jsonDict = Nothing
End Function

Public Function Athena_Token_get_db(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_DB_FILE)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_db = result
End Function

'AÃ±ade un elemento a la lista de eventos del json
Public Function Athena_Token_Add_Event_JSON(events As Variant, value As String, isAdjust As Boolean, t_adjust As String) As Variant
    Dim newEvents() As Variant
    Dim isAdj As String: isAdj = ""
    If isAdjust Then isAdj = "Ajuste"
    
    ReDim newEvents(0 To 0) As Variant
    If Not IsEmpty(events) And VariantSize(events) > 0 Then
        newEvents = events
        ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
    End If
    newEvents(UBound(newEvents)) = StringArray(value, t_adjust, isAdj, "", getUserLogin, Format(Now, Athena_FullTime_Pattern))
    
    Athena_Token_Add_Event_JSON = newEvents
End Function

' Update token's JSON replacing adjusted event
Public Sub Athena_Token_Replace_Event_JSON(ByRef token As Outlook.mailItem, mark_new As String, mark_old As String, when As String)
    ' Init
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_STATUS))
    Dim rowCount As Integer: rowCount = 0
    Dim notChanged As Boolean: notChanged = True
    
    Do While rowCount = 0 <= UBound(jsonEvent) And notChanged
        If mark_new <> "" And CDate(jsonEvent(rowCount)(1)) = CDate(mark_old) Then
            jsonEvent(rowCount)(1) = mark_new
            jsonEvent(rowCount)(2) = "Ajuste"
            jsonEvent(rowCount)(5) = when
            notChanged = False
        End If
        rowCount = rowCount + 1
    Loop
    
    jsonDict(TOKEN_EVENTS_STATUS) = Athena_Token_Convert_Events_JSON(jsonEvent)
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = when
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
End Sub

' Update token's JSON including adjusted event
Public Sub Athena_Token_Include_Event_JSON(ByRef token As Outlook.mailItem, mark_init As String, mark_end As String, who As String, when As String)
    Dim stampN As String
    Dim rowCount As Integer: rowCount = 0
    Dim newCount As Integer: newCount = 0
    Dim newEvents() As Variant: ReDim newEvents(0 To 0) As Variant
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    Dim noIncludedInit As Boolean: noIncludedInit = True
    Dim noIncludedEnd As Boolean: noIncludedEnd = True
    
    ' Init
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict("events"))
    ReDim Preserve newEvents(0 To UBound(jsonEvent))
    
    ' Por cada entrada en el JSON
    For rowCount = 0 To UBound(jsonEvent)
        stampN = jsonEvent(rowCount)(1)
        ' Include init mark
        If mark_init <> "" And CDate(stampN) > CDate(mark_init) And noIncludedInit Then
            ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
            newEvents(rowCount + newCount) = StringArray(Athena_Mail_Status_Started, mark_init, "Ajuste", "", who, when)
            newCount = newCount + 1
            noIncludedInit = False
        End If
        
        ' Include end mark
        If mark_end <> "" And CDate(stampN) > CDate(mark_end) And noIncludedEnd Then
            ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
            newEvents(rowCount + newCount) = StringArray(Athena_Mail_Status_Stopped, mark_end, "Ajuste", "", who, when)
            newCount = newCount + 1
            noIncludedEnd = False
        End If
        
        ' Record existing one
        newEvents(rowCount + newCount) = jsonEvent(rowCount)
    Next

    ' Append Before
    If UBound(jsonEvent) = UBound(newEvents) Then
        ' Include init mark
        If mark_init <> "" Then
            ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
            newEvents(rowCount + newCount) = StringArray(Athena_Mail_Status_Started, mark_init, "Ajuste", "", who, when)
            newCount = newCount + 1
            noIncludedInit = False
        End If
        
        ' Include end mark
        If mark_end <> "" Then
            ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
            newEvents(rowCount + newCount) = StringArray(Athena_Mail_Status_Stopped, mark_end, "Ajuste", "", who, when)
            newCount = newCount + 1
            noIncludedEnd = False
        End If
    End If
    jsonDict(TOKEN_EVENTS_STATUS) = Athena_Token_Convert_Events_JSON(newEvents)
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
End Sub

' Update token's JSON discarding event
Public Sub Athena_Token_Discard_Event_JSON(ByRef token As Outlook.mailItem, t_init_stamp As String, t_end_stamp As String, status_init As String, status_end As String)
    Dim jsonDict As Dictionary
    Dim rowCount As Integer
    Dim newEvents() As Variant
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    ' Init
    Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict("events"))
    ReDim Preserve newEvents(0 To UBound(jsonEvent))
    
    ' Por cada entrada en el JSON
    For rowCount = 0 To UBound(jsonEvent)
        Dim statN As String: statN = jsonEvent(rowCount)(0)
        Dim stampN As String: stampN = jsonEvent(rowCount)(1)
        Dim adjN As String: adjN = ""
        Dim ignoreN As String: ignoreN = ""
        Dim whoN As String: whoN = "-1"
        Dim whenN As String: whenN = jsonEvent(rowCount)(1)
        If UBound(jsonEvent(rowCount)) > 3 Then
            adjN = jsonEvent(rowCount)(2)
            ignoreN = jsonEvent(rowCount)(3)
            whoN = jsonEvent(rowCount)(4)
            whenN = jsonEvent(rowCount)(5)
        End If
        ' Si se corresponde con la marca a descartar >> Actualizar en f(x) del n de elementos
        If (statN = status_init And stampN = t_init_stamp) Or (statN = status_end And stampN = t_end_stamp) Then
            newEvents(rowCount) = StringArray(jsonEvent(rowCount)(0), jsonEvent(rowCount)(1), adjN, "Descartado", whoN, t)
        Else
            newEvents(rowCount) = StringArray(jsonEvent(rowCount)(0), jsonEvent(rowCount)(1), adjN, ignoreN, whoN, whenN)
        End If
    Next
    
    jsonDict(TOKEN_EVENTS_STATUS) = Athena_Token_Convert_Events_JSON(newEvents)
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save

    Set jsonDict = Nothing
End Sub

Function Athena_Token_get_Status(token As Outlook.mailItem) As String
    Athena_Token_get_Status = token.CC
End Function

Sub Athena_Mail_set_status(ByRef token As Outlook.mailItem, status As String)
On Error GoTo ErrHndlr
    token.CC = status
    token.categories = status
ErrHndlr:
End Sub

' Check // Only being called with temp status (Classifying, No Classify) ==> Do no check nor events
Sub Athena_Token_set_Status(ByRef token As Outlook.mailItem, status As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    ' Set
    jsonDict("token_categories") = Split(token.categories, ";")
    Athena_Mail_set_status token, status
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
End Sub

Function Athena_Token_get_EntryID(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_ENTRY_ID)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_EntryID = result
End Function

Sub Athena_Mail_set_title(ByRef token As Outlook.mailItem, title As String)
On Error GoTo ErrHndlr
    If token.ConversationTopic <> title Or token.ConversationTopic = "" Then token.Subject = title
ErrHndlr:
End Sub

Function Athena_Token_get_Title(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_TITLE)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Title = result
End Function

Function Athena_Token_get_Origin(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_ORIGIN)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Origin = result
End Function

Function Athena_Token_get_OriginCod(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_ORIGIN_COD)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_OriginCod = result
End Function

Function Athena_Token_get_Name(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_TITLE)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Name = result
End Function

Function Athena_Mail_set_priority(ByRef token As Outlook.mailItem, priority As String)
On Error GoTo ErrHndlr
    If priority = Athena_Mail_Priority_Critical Then
        token.Importance = olImportanceHigh
    ElseIf priority = Athena_Mail_Priority_Low Then
        token.Importance = olImportanceLow
    Else
        token.Importance = olImportanceNormal
    End If
ErrHndlr:
End Function


Function Athena_Token_get_Prioridad(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_PRIORITY)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Prioridad = result
End Function

Function Athena_Token_get_Client(token As Outlook.mailItem, client As String) As String
    
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    Athena_Token_init_client_json jsonDict

    
    jsonDict(TOKEN_CLIENT) = client
    
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing

End Function



Function Athena_Token_get_PrioridadCod(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_PRIORITY_COD)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_PrioridadCod = result
End Function

Function Athena_Token_get_AreaDept(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_AREA)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_AreaDept = result
End Function

Function Athena_Token_get_AreaDeptCod(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_AREA_COD)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_AreaDeptCod = result
End Function

Function Athena_Token_get_Num_Actions(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_VOLUMEN)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Num_Actions = result
End Function

Function Athena_Token_get_Comments(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_COMMENT)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Comments = result
End Function

Function Athena_Token_get_Matrix_Units(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_MATRIX_UNITS)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Matrix_Units = result
End Function

Function Athena_Token_get_Categoria(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_CAT)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Categoria = result
End Function

Function Athena_Token_get_AreaDeptCategoriaCod(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_CAT_COD)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_AreaDeptCategoriaCod = result
End Function

Function Athena_Token_get_Country(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_UNIT)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_Country = result
End Function

Function Athena_Token_get_CountryCod(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_UNIT_COD)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_CountryCod = result
End Function

Function Athena_Token_get_UltimaMarca(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = ""
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_LAST_UPDATE_STAMP)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_UltimaMarca = result
End Function

Public Function Athena_Token_read_Events_JSON(jsonEvent As Variant) As Variant
    Dim newEvents() As Variant
    Dim rowCount As Integer
    Dim skipped As Integer: skipped = 0
    ReDim newEvents(0 To 0) As Variant
    If VariantDictSize(jsonEvent) > 0 Then
        ' New Structure
        If VarType(jsonEvent) = 8204 Then
            For rowCount = 0 To VariantDictSize(jsonEvent) - 1
                If Trim(jsonEvent(rowCount)) <> "" Then
                    newEvents(rowCount - skipped) = VBA.Split("" & jsonEvent(rowCount), SEP_TOKEN)
                    ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
                Else
                    skipped = skipped + 1
                End If
            Next
        ElseIf VarType(jsonEvent.item(1)) = 8 Then
            For rowCount = 1 To jsonEvent.Count
                If Trim(jsonEvent.item(rowCount)) <> "" Then
                    newEvents(rowCount - skipped - 1) = VBA.Split("" & jsonEvent.item(rowCount), SEP_TOKEN)
                    ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
                Else
                    skipped = skipped + 1
                End If
            Next
        ' Old One
        ElseIf VarType(jsonEvent.item(1)) = 9 Then
            Dim i As Object
            rowCount = 0
            For Each i In jsonEvent
                newEvents(rowCount) = StringArray(i(EVENTO_JSON_STATUS), i(EVENTO_JSON_STAMP), "", "", "-1", i(EVENTO_JSON_STAMP))
                If i.Count >= 3 Then newEvents(rowCount) = StringArray(i(EVENTO_JSON_STATUS), i(EVENTO_JSON_STAMP), i(EVENTO_JSON_ADJUST), i(EVENTO_JSON_IGNORE), i(EVENTO_JSON_WHO), i(EVENTO_JSON_TIME))
                rowCount = rowCount + 1
                ReDim Preserve newEvents(0 To UBound(newEvents) + 1)
            Next
        End If
    End If
    ' Remove last empty element
    If UBound(newEvents) > 0 Then ReDim Preserve newEvents(0 To UBound(newEvents) - 1)
    Athena_Token_read_Events_JSON = newEvents
End Function

' Converts from Variant/String() to Variant/String to store it at JSON
Private Function Athena_Token_Convert_Events_JSON(events As Variant) As Variant
    Dim newEvents() As Variant
    ReDim newEvents(0 To UBound(events)) As Variant
    Dim rowCount As Integer
    For rowCount = 0 To UBound(events)
        newEvents(rowCount) = VBA.Join(events(rowCount), SEP_TOKEN)
    Next
    Athena_Token_Convert_Events_JSON = newEvents
End Function

' Read JSON events into Variant/String() structure
Public Function Athena_Token_get_Events_JSON(token As Outlook.mailItem, eventsField As String) As Variant
    If Not token Is Nothing Then
        ' Init / Read JSON
        Dim jsonDict As Dictionary
        Dim jsonEvent As Variant
    
        Set jsonDict = Athena_cJSON.ParseJson(token.body)
        If jsonDict.Exists(eventsField) Then Set jsonEvent = jsonDict(eventsField) 'jsonDict("events")
      
        ' Parse to Variant/String()
        Athena_Token_get_Events_JSON = Athena_Token_read_Events_JSON(jsonEvent)
        Set jsonDict = Nothing
    End If
End Function

Function Athena_Token_get_IdDuty(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim result As String: result = "-1"
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    result = jsonDict(TOKEN_TASK_ID)
ErrHndlr:
    Set jsonDict = Nothing
    Athena_Token_get_IdDuty = result
End Function

Sub Athena_Mail_set_IdDuty(ByRef token As Outlook.mailItem, Optional idDuty As String = "-1")
On Error GoTo ErrHndlr
    If idDuty = "-1" Then
        token.To = "TAREA_ID@" & Format(Now, Athena_TraceMonthDate_Pattern)
    Else
        token.To = idDuty & "@" & Format(Now, Athena_TraceMonthDate_Pattern)
    End If
ErrHndlr:
End Sub

Sub Athena_Token_set_IdDuty(ByRef token As Outlook.mailItem, idDuty As String)
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    ' Set
    If jsonDict(TOKEN_TASK_ID) = "-1" And idDuty <> "-1" Then
        ' Mail set up
        Athena_Mail_set_IdDuty token, idDuty
        ' Json set up
        jsonDict(TOKEN_TASK_ID) = idDuty
        ' Update Token body
        token.BodyFormat = olFormatRichText
        token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
        token.Save
    End If
ErrHndlr:
    Set jsonDict = Nothing
End Sub

Sub Athena_Token_set_synchro(ByRef token As Outlook.mailItem, synchro As Boolean)
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    If synchro Then
        jsonDict(TOKEN_SYNCHRO) = "S"
    Else
        jsonDict(TOKEN_SYNCHRO) = "N"
    End If
    
    ' Update Token body
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
ErrHndlr:
    Set jsonDict = Nothing
End Sub

' Body
Sub Athena_Token_set_body(ByRef token As Outlook.mailItem, campos() As String, status_init As String, idDuty As String)
    Dim jsonDict As Dictionary
    ' Create / Read
    If token.body = "" Then
        Set jsonDict = New Dictionary
        jsonDict.CompareMode = TextCompare
    Else
        Set jsonDict = Athena_cJSON.ParseJson(token.body)
    End If
    
    ' Initialize
    Athena_Token_init_json jsonDict
    
    ' Is there a set up ?
    If VariantSize(campos) > 0 Then Athena_Token_Update_JSON token, jsonDict, campos, status_init, idDuty
    
    ' Update Body
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
End Sub

' Custom Columns
Sub Athena_Token_set_custom_columns(ByRef token As Outlook.mailItem, campos() As String)
    'Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    'Custom Columns
    token.UserProperties.Add(Athena_Column_Category, olText).value = campos(CAMPO_CATEGORY) 'jsonDict(TOKEN_CAT)
    token.UserProperties.Add(Athena_Column_Solver, olText).value = token.SentOnBehalfOfName 'campos(CAMPO_USER_EMPLOYEE) 'jsonDict(TOKEN_OWNER)
    token.UserProperties.Add(Athena_Column_Client, olText).value = campos(CAMPO_COUNTRY) 'jsonDict(TOKEN_UNIT)
    token.UserProperties.Add(Athena_Column_Dept, olText).value = campos(CAMPO_AREA) 'jsonDict(TOKEN_AREA)
    token.UserProperties.Add(Athena_Column_Priority, olText).value = campos(CAMPO_PRIORITY_COD) 'jsonDict(TOKEN_PRIORITY_COD )
    'token.UserProperties.Add(Athena_Column_Customer, olText).value = campos(CAMPO_CLIENT_COD)
    token.UserProperties.Add(Athena_Column_Comm, olText).value = campos(CAMPO_COMMENT) 'jsonDict(TOKEN_COMMENT)
    token.UserProperties.Add(Athena_Column_Time, olText).value = convertTime(getTotalTimeFromToken(token), False)
    
    'token.UserProperties.Add("TM Status", olText).value = jsonDict(TOKEN_STATUS_COD)   ' Duplicado ya con la columna Category >> N/A
    
End Sub

'Comments
Sub Athena_Token_set_comments(ByRef token As Outlook.mailItem, comments As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    jsonDict(TOKEN_COMMENT) = Trim(clearString(comments))
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    Set jsonDict = Nothing
End Sub

Sub Athena_Mail_set_Owner(ByRef token As Outlook.mailItem, owner_desc As String, owner_cod As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    If owner_cod <> "" Then
        Athena_Token_check_owner_json jsonDict, getUserEmployee(owner_cod), owner_cod
        token.SentOnBehalfOfName = owner_desc
        token.BCC = owner_desc
    End If
End Sub

Function Athena_Token_get_Owner(token As Outlook.mailItem) As String
    Athena_Token_get_Owner = token.SentOnBehalfOfName
End Function

Function Athena_Token_get_EmployeeOwner(token As Outlook.mailItem) As String
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_owner_json jsonDict
    Athena_Token_get_EmployeeOwner = jsonDict(TOKEN_OWNER)
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_OwnerCod(token As Outlook.mailItem) As String
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_owner_json jsonDict
    Athena_Token_get_OwnerCod = jsonDict(TOKEN_OWNER_COD)
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_Volume(token As Outlook.mailItem) As String
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_volumen_json jsonDict
    Athena_Token_get_Volume = jsonDict(TOKEN_VOLUMEN)
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_PK(token As Outlook.mailItem) As String
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_marks_json jsonDict
    Athena_Token_get_PK = jsonDict(TOKEN_PK)
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_Synchronized(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_trace_json jsonDict
    Athena_Token_get_Synchronized = jsonDict(TOKEN_SYNCHRO)
ErrHndlr:
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_comunica(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_incident_json jsonDict
    Athena_Token_get_comunica = jsonDict(TOKEN_COMUNICA)
ErrHndlr:
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_incident(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_incident_json jsonDict
    Athena_Token_get_incident = jsonDict(TOKEN_INCIDENT_OP)
ErrHndlr:
    Set jsonDict = Nothing
End Function

Function Athena_Token_get_volumen_error(token As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Athena_Token_init_incident_json jsonDict
    Athena_Token_get_volumen_error = jsonDict(TOKEN_VOLUMEN_ERROR)
ErrHndlr:
    Set jsonDict = Nothing
End Function



Sub Athena_Token_set_Incident(ByRef token As Outlook.mailItem, inc_op As String, volumen_error As String, notes As String, comunica As String)

    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    Athena_Token_init_incident_json jsonDict
    Athena_Token_init_notes_json jsonDict
    
   'If inc_op <> "" Then inc_op = "1"
    jsonDict(TOKEN_INCIDENT_OP) = inc_op
    jsonDict(TOKEN_VOLUMEN_ERROR) = volumen_error
    jsonDict(TOKEN_COMUNICA) = comunica
    
  ' End If
    
    'Athena_Token_check_notes_json jsonDict, "" & notes
    
    jsonDict(TOKEN_NOTES) = notes
    
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
    
    
End Sub


Sub Athena_Token_set_Notes(ByRef token As Outlook.mailItem, notes As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    Athena_Token_check_notes_json jsonDict, "" & notes
    
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
End Sub

Sub Athena_Token_set_Indexs(ByRef token As Outlook.mailItem, Index As Variant)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    If Not jsonDict.Exists(TOKEN_INDEX) Then jsonDict.Add TOKEN_INDEX, getEmptyEvents
    
    ' Index List
    If VariantSize(Index) > 0 Then
        jsonDict(TOKEN_INDEX) = Athena_Token_Convert_Events_JSON(Index)
    Else
        jsonDict(TOKEN_INDEX) = getEmptyEvents
    End If
   
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    token.Save
    
    Set jsonDict = Nothing
End Sub

Function Athena_isTokenType(token As Outlook.mailItem) As Boolean
    Athena_isTokenType = Not token.Sent
End Function

Function Athena_isTokenMarked(token As Outlook.mailItem) As Boolean
    Athena_isTokenMarked = IsInArray("#", Split(token.categories, ";")) Or IsInArray("#", Split(token.CC, ";"))
End Function

'Actualiza el estado del borrador (Called by "CambiaEstado")
Sub Athena_Token_Update_State(ByRef token As Outlook.mailItem, status As String, statusCod As Integer, owner As String, t As String)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    ' Status Info
    If (Athena_Token_get_Status(token) <> status) Then
        ' 1Âº Update JSON
        ' Stopped >> End?
        If (Athena_Token_get_Status(token) = Athena_Mail_Status_Stopped And status = Athena_Mail_Status_End) _
            Or (Athena_Token_get_Status(token) = Athena_Mail_Status_End And status = Athena_Mail_Status_Stopped) Then
            Athena_Token_check_status_json jsonDict, Athena_Token_get_Status(token), Athena_Mail_Status_Started, False, t
            t = "" & Format(DateAdd("s", 1, t), Athena_FullTime_Pattern)
            Athena_Token_check_status_json jsonDict, Athena_Mail_Status_Started, status, False, t
        Else ' Other >>
            Athena_Token_check_status_json jsonDict, token.CC, status, False, t
        End If
        ' 2Âº Update Mail
        Athena_Mail_set_status token, status
    End If
    
    ' Owner Info
    If owner <> "" Then
        Dim ownerCod As Integer: ownerCod = getUserCod(owner)
        Athena_Token_check_owner_json jsonDict, owner, "" & ownerCod
        Athena_Mail_set_Owner token, getUserName(owner), "" & ownerCod
    End If
    
    Athena_Token_check_db_json jsonDict, getMailBox(token), "" & jsonDict(TOKEN_AREA_COD), getPath(token)
    
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"

    token.BCC = token.SentOnBehalfOfName
    token.BodyFormat = olFormatRichText
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    Call Athena_Token_Update_Icon(token, statusCod)
    
    ' Update custom values
    Dim formVars() As String: formVars = getFormVarsFromToken(token)
    Athena_Token_set_custom_columns token, formVars
    
    Athena_Token_Mark_Read token
    token.Save
    
    Set jsonDict = Nothing
End Sub

Public Sub Athena_Token_Mark_Read(ByRef token As Outlook.mailItem)
    If Athena_Token_get_Status(token) = Athena_Mail_Status_End Or Athena_Token_get_Status(token) = Athena_Mail_Status_Discarted Then
        token.UnRead = False
    Else
        token.UnRead = True
    End If
End Sub

Public Function Athena_isTokenEvent_Status_Start(status_stat As String) As Boolean
    Select Case status_stat
        Case Athena_Mail_Status_Started:
            Athena_isTokenEvent_Status_Start = True
        Case Else
            Athena_isTokenEvent_Status_Start = False
    End Select
End Function

'''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''' SYNCHRONIZE '''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''
Public Function Athena_Token_push(ByRef token As Outlook.mailItem) As Boolean
On Error GoTo ErrHndlr
    Dim refreshed As Boolean
    Athena_Token_rebuild_json token
    refreshed = Athena_Token_synchronize(token)
ErrHndlr:
    If Err Then
        Athena_Token_set_synchro token, False
        refreshed = False
    End If
    Athena_Token_push = refreshed
End Function

Public Function Athena_Token_synchronize(ByRef token As Outlook.mailItem) As Boolean
On Error GoTo ErrHndlr
    Dim synchro As Boolean: synchro = True
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    Dim markT As Single
    
    ' Where do I Should save it?
    'Dim db As String: db = Athena_Token_set_db(token)
    Dim db As String: db = DDBB_Athena_file_data
    
    ' Get Insert's
    markT = time
    Dim insDuty As String: insDuty = Athena_Token_get_ins_json(jsonDict)
    Traza lgINFO, "[GENERATE INSERTS] " & vbTab & time - markT & vbTab & time, "Athena_Token_synchronize"
    
    ' Save Duty And Duty_Event (And Duty_Matrix)
    markT = time
    If DB_DML(DDBB_Athena_file_path & DDBB_Athena_file_data, insDuty, verbose) <= 0 Then synchro = False
    Traza lgINFO, "[EXECUTE INSERTS] " & vbTab & time - markT & vbTab & time, "Athena_Token_synchronize"
    
    ' Mark Token as Synchroned?
    'Athena_Token_set_synchro token, synchro 'jsonDict(TOKEN_SYNCHRO) = "S"
    If synchro Then
        jsonDict(TOKEN_SYNCHRO) = "S"
    Else
        jsonDict(TOKEN_SYNCHRO) = "N"
    End If
    
    ' Mark Token as Updated
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    Athena_Token_Mark_Read token
    token.Save
    
    ' TODO? - SAVE IT AS TXT FILE (WHERE?)'
    synchro = True
ErrHndlr:
    Set jsonDict = Nothing
    If Err Then
        Athena_Token_synchronize = synchro = False
        Traza lgFATAL, Err.Description, "Athena_Token_synchronize"
        Err.Raise Err.Number, Err.Source, Err.Description
    End If
    Athena_Token_synchronize = synchro
End Function

'''''''''''''''''''''''''''''''''''''''''''''
''''''''' REPAIR / REBUILD TOKEN ''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''
Public Sub Athena_Token_rebuild_json(ByRef token As Outlook.mailItem)
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    
    ' Set Up newest token field set up to date
    Athena_Token_init_json jsonDict
    
    'ID
    If jsonDict(TOKEN_TASK_ID) = "" Or jsonDict(TOKEN_TASK_ID) = "-1" Then jsonDict(TOKEN_TASK_ID) = getIdDuty
    
    ' Status
    If jsonDict(TOKEN_STATUS_COD) = "" Then jsonDict(TOKEN_STATUS_COD) = getStatusCod("" & jsonDict(TOKEN_STATUS)(1))
    ' Category
    If jsonDict(TOKEN_CAT_COD) = "" Then
        Dim infoCod As Variant: infoCod = Athena_Get_All_AreaDeptCod_From_Token("" & jsonDict(TOKEN_AREA), "" & jsonDict(TOKEN_UNIT), "" & jsonDict(TOKEN_CAT))
        If Not IsEmpty(infoCod) And VariantSize(infoCod) > 0 Then
            jsonDict(TOKEN_CAT_COD) = infoCod(0)(0)
            jsonDict(TOKEN_AREA_COD) = infoCod(0)(1)
            jsonDict(TOKEN_UNIT_COD) = infoCod(0)(2)
        End If
    End If
    ' Time
    If jsonDict(TOKEN_TOKEN_STAMP) = "" Then jsonDict(TOKEN_TOKEN_STAMP) = Format(token.CreationTime, Athena_FullTime_Pattern)
    If jsonDict(TOKEN_DUTY_STAMP) = "" Then jsonDict(TOKEN_DUTY_STAMP) = Format(token.CreationTime, Athena_FullTime_Pattern)
    ' Owner
    If jsonDict(TOKEN_OWNER_COD) = "" Then jsonDict(TOKEN_OWNER_COD) = getUserCod(jsonDict(TOKEN_OWNER))
    ' Origin
    If jsonDict(TOKEN_ORIGIN_COD) = "" Then jsonDict(TOKEN_ORIGIN_COD) = getOriginCod(jsonDict(TOKEN_ORIGIN))
    ' Priority
    If jsonDict(TOKEN_PRIORITY_COD) = "" Then jsonDict(TOKEN_PRIORITY_COD) = getPriorityCod(jsonDict(TOKEN_PRIORITY))
     ' Client
    'If jsonDict(TOKEN_CLIENT_COD) = "" Then jsonDict(TOKEN_CLIENT_COD) = getClientCod(jsonDict(TOKEN_CLIENT))
    'If jsonDict(TOKEN_CLIENT_COD) = "" Then jsonDict (TOKEN_CLIENT)
    ' Volumen
    If jsonDict(TOKEN_VOLUMEN) = "" Or Not (esNumeroAccionesValido(jsonDict(TOKEN_VOLUMEN))) Then jsonDict(TOKEN_VOLUMEN) = "1"
    
    ' Events Status
    jsonDict(TOKEN_EVENTS_STATUS) = Athena_Token_Convert_Events_JSON(Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_STATUS)))
    
    ' Events Owner
    Dim eventsOwner As Variant: eventsOwner = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_OWNER))
    If IsEmpty(eventsOwner) Or VariantSize(eventsOwner) = 0 Then jsonDict(TOKEN_EVENTS_OWNER) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(eventsOwner, "" & jsonDict(TOKEN_OWNER), False, "" & jsonDict(TOKEN_OWNER_COD)))
    
    ' Events Priority
    Dim eventsPriority As Variant: eventsPriority = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_PRIORITY))
    If IsEmpty(eventsPriority) Or VariantSize(eventsPriority) = 0 Then jsonDict(TOKEN_EVENTS_PRIORITY) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(eventsPriority, "" & jsonDict(TOKEN_PRIORITY_COD), False, ""))
    
    ' Events Client
'    Dim eventsClient As Variant: eventsClient = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_CLIENT))
'    If IsEmpty(eventsClient) Or VariantSize(eventsClient) = 0 Then jsonDict(TOKEN_EVENTS_CLIENT) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(eventsClient, "" & jsonDict(TOKEN_CLIENT_COD), False, ""))
    
    ' Events Classified
    Dim eventsCategory As Variant: eventsCategory = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_CAT))
    If IsEmpty(eventsCategory) Or VariantSize(eventsCategory) = 0 Then jsonDict(TOKEN_EVENTS_CAT) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(eventsCategory, "" & jsonDict(TOKEN_CAT_COD), False, ""))

    ' Events Volumen
    Dim eventsVolumen As Variant: eventsVolumen = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_VOLUMEN))
    If IsEmpty(eventsVolumen) Or VariantSize(eventsVolumen) = 0 Then jsonDict(TOKEN_EVENTS_VOLUMEN) = Athena_Token_Convert_Events_JSON(Athena_Token_Add_Event_JSON(eventsVolumen, "" & jsonDict(TOKEN_VOLUMEN), False, ""))

    ' Matrix
    If jsonDict(TOKEN_UNIT) = UNIT_CROSS And jsonDict(TOKEN_CAT_COD) <> "-1" Then Athena_Token_check_matrix_units_json jsonDict, jsonDict(TOKEN_CAT_COD)
    If jsonDict(TOKEN_UNIT) = UNIT_CROSS Then Athena_Token_check_matrix_json jsonDict, "" & jsonDict(TOKEN_MATRIX_UNITS)
    
    Athena_Token_check_trace_json jsonDict, token
    
    jsonDict(TOKEN_LAST_UPDATE_STAMP) = t
    jsonDict(TOKEN_SYNCHRO) = "N"
    token.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
    
    token.BCC = token.SentOnBehalfOfName
    
    token.Save
ErrHndlr:
    Set jsonDict = Nothing
    If Err Then
        Call Traza(lgFATAL, Err.Description, "Athena_Token_rebuild_json")
        Err.Raise Err.Number, Err.Source, Err.Description
    End If
End Sub

'''''''''''''''''''''''''''''''''''''''''''''
''''''''''''' QUERY SNAPSHOT ''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''
Public Function Athena_Token_get_ins_json(jsonDict As Dictionary) As String
    Dim t As String: t = Format(Now, Athena_FullTime_Pattern)
    ' Duty
    Dim sqlInsDuty As String: sqlInsDuty = Athena_Token_get_ins_duty_json(jsonDict, t)
    ' Duty Event
    Dim sqlInsDutyEvent As String: sqlInsDutyEvent = Athena_Token_get_ins_dutyevent_json(jsonDict, t)
    ' Duty Matrix
    Dim sqlInsDutyMatrix As String: sqlInsDutyMatrix = Athena_Token_get_ins_dutymatrix_json(jsonDict, t)
    ' Duty Var
    Dim sqlInsDutyVar As String: sqlInsDutyVar = Athena_Token_get_ins_dutyvar_json(jsonDict, t)
    
    Athena_Token_get_ins_json = sqlInsDuty & ";" & vbNewLine & sqlInsDutyEvent & ";" & sqlInsDutyMatrix & ";" & sqlInsDutyVar
    
End Function

Public Function Athena_Token_get_ins_duty_json(jsonDict As Dictionary, t As String) As String
    Dim is_inc As String
    Dim v_err As String: v_err = "null"
    Dim miTask As New TaskManagerForm
'    If jsonDict(TOKEN_INCIDENT_OP) <> "" Then
'        is_inc = "'" & jsonDict(TOKEN_INCIDENT_OP) & "'"
'        v_err = "'" & jsonDict(TOKEN_VOLUMEN_ERROR) & "'"
'    End If

    Athena_Token_get_ins_duty_json = "INSERT OR REPLACE INTO DUTY " _
    & "(DUTY_COD, STATUS_COD, TOKEN_ENTRY_ID, CAT_AREA_UNIT_COD, ORIGIN_COD, NAME, OWNER_COD, PRIOR_COD, LAST_EVENT_STAMP, PK, VOLUME, WHO, `WHEN`, CLIENT, IS_INC, VOLUMEN_ERR, COMENTARIOS) " _
    & " SELECT '" & jsonDict(TOKEN_TASK_ID) & "'," & jsonDict(TOKEN_STATUS_COD) & ",'" & jsonDict(TOKEN_ENTRY_ID) & "'," & jsonDict(TOKEN_CAT_COD) & "," & jsonDict(TOKEN_ORIGIN_COD) _
    & ",'" & clearString(jsonDict(TOKEN_TITLE)) & "'," & jsonDict(TOKEN_OWNER_COD) & "," & jsonDict(TOKEN_PRIORITY_COD) & ",'" & jsonDict(TOKEN_LAST_UPDATE_STAMP) & "','" & jsonDict(TOKEN_PK) _
    & "'," & jsonDict(TOKEN_VOLUMEN) & ",'" & getUserLogin & "','" & t & "','" & jsonDict(TOKEN_CLIENT) & "','" & jsonDict(TOKEN_INCIDENT_OP) & "','" & v_err & "','" & jsonDict(TOKEN_NOTES) & "'"
    
End Function


Private Function Athena_Token_get_ins_dutyevent_json(jsonDict As Dictionary, t As String) As String
    Dim insSQL As String
    insSQL = "UPDATE DUTY_EVENT SET IGNORE = 1 WHERE DUTY_COD = '" & jsonDict(TOKEN_TASK_ID) & "';"
    insSQL = insSQL & vbNewLine & " INSERT OR REPLACE INTO DUTY_EVENT (ENTRY_ID, DUTY_COD, EVENT_COD, EVENT_STAMP, WHO_ID, VALUE, IS_ADJ, IGNORE, WHEN_STAMP) "
    insSQL = insSQL & vbNewLine & Athena_Token_get_ins_dutyevent_times_json(jsonDict, t)
    
    Dim insEventStatus As String: insEventStatus = Athena_Token_get_ins_dutyevent_status_json(jsonDict, t)
    If insEventStatus <> "" Then insSQL = insSQL & vbNewLine & " UNION ALL " & insEventStatus
    
    If full_trace Then
        Dim insEventOwner As String: insEventOwner = Athena_Token_get_ins_dutyevent_owner_json(jsonDict, t)
        Dim insEventCat As String: insEventCat = Athena_Token_get_ins_dutyevent_category_json(jsonDict, t)
        Dim insEventPriority As String: insEventPriority = Athena_Token_get_ins_dutyevent_priority_json(jsonDict, t)
        Dim insEventVolumen As String: insEventVolumen = Athena_Token_get_ins_dutyevent_volumen_json(jsonDict, t)
        
        If insEventOwner <> "" Then insSQL = insSQL & vbNewLine & " UNION ALL " & insEventOwner
        If insEventCat <> "" Then insSQL = insSQL & vbNewLine & " UNION ALL " & insEventCat
        If insEventPriority <> "" Then insSQL = insSQL & vbNewLine & " UNION ALL " & insEventPriority
        If insEventVolumen <> "" Then insSQL = insSQL & vbNewLine & " UNION ALL " & insEventVolumen
    End If
    
    Athena_Token_get_ins_dutyevent_json = insSQL
End Function

Private Function Athena_Token_get_ins_dutyevent_times_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim Sql As String ' MAIL_STAMP / TOKEN_STAMP / DUTY_STAMP ( EVENT_COD = 0 )
    Sql = Sql & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_TraceCod & ",'" & jsonDict(TOKEN_MAIL_STAMP) & "','" & getUserLogin & "','MAIL', null, null,'" & jsonDict(TOKEN_DUTY_STAMP) & "'"
    Sql = Sql & vbNewLine & " UNION ALL SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_TraceCod & ",'" & jsonDict(TOKEN_TOKEN_STAMP) & "','" & getUserLogin & "','TOKEN', null, null,'" & jsonDict(TOKEN_DUTY_STAMP) & "'"
    Sql = Sql & vbNewLine & " UNION ALL SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_TraceCod & ",'" & jsonDict(TOKEN_DUTY_STAMP) & "','" & getUserLogin & "','DUTY', null, null,'" & jsonDict(TOKEN_DUTY_STAMP) & "'"
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_times_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyevent_status_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_STATUS))
    Dim Sql As String: Sql = "" ' INICIOS / PARADAS / FIN ( EVENT_COD = 1 )
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    For rowCount = 0 To UBound(jsonEvent)
'  "#En Pausa|2023-09-12 11:14:19|||n497208|2023-09-12 11:14:19",
        Dim statN As String: statN = jsonEvent(rowCount)(0)
        Dim stampN As String: stampN = jsonEvent(rowCount)(1)
        Dim adjN As String: adjN = "null"
        Dim ignoreN As String: ignoreN = "null"
        Dim whoN As String: whoN = "-1"
        Dim whenN As String: whenN = t
        
        If UBound(jsonEvent(rowCount)) > 3 Then
            If jsonEvent(rowCount)(2) <> "" Then adjN = "'1'"
            If jsonEvent(rowCount)(3) <> "" Then ignoreN = "'1'"
            If jsonEvent(rowCount)(4) <> "" Then whoN = jsonEvent(rowCount)(4)
            If jsonEvent(rowCount)(5) <> "" Then whenN = jsonEvent(rowCount)(5)
        End If
        
        Sql = Sql & sep & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_ActivityCod & ",'" & stampN & "','" & whoN & "','" & getStatusCod(statN) & "'," & adjN & "," & ignoreN & ",'" & whenN & "'"
        sep = vbNewLine & " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_status_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyevent_owner_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_OWNER))
    Dim Sql As String: Sql = "" ' PARA TI / PARA MI ( EVENT_COD = 2 )
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    For rowCount = 0 To UBound(jsonEvent)
'   "n54286|1|||n54286|2023-09-22 15:04:55"
        Dim value As String: value = jsonEvent(rowCount)(1)
        Dim adjN As String: adjN = "null"
        Dim ignoreN As String: ignoreN = "null"
        Dim whoN As String: whoN = jsonEvent(rowCount)(4)
        Dim whenN As String: whenN = jsonEvent(rowCount)(5)
        
        Sql = Sql & sep & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_OwnershipCod & ",'" & whenN & "','" & whoN & "','" & value & "'," & adjN & "," & ignoreN & ",'" & t & "'"
        sep = vbNewLine & " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_owner_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyevent_category_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_CAT))
    Dim Sql As String: Sql = "" ' CLASIFICACIONES ( EVENT_COD = 3 )
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    For rowCount = 0 To UBound(jsonEvent)
'     "1561||||n54286|2023-09-22 13:35:01"
        Dim value As String: value = jsonEvent(rowCount)(0)
        Dim adjN As String: adjN = "null"
        Dim ignoreN As String: ignoreN = "null"
        Dim whoN As String: whoN = jsonEvent(rowCount)(4)
        Dim whenN As String: whenN = jsonEvent(rowCount)(5)
        
        Sql = Sql & sep & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_ClassifiedCod & ",'" & whenN & "','" & whoN & "','" & value & "'," & adjN & "," & ignoreN & ",'" & t & "'"
        sep = vbNewLine & " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_category_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyevent_priority_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_PRIORITY))
    Dim Sql As String: Sql = "" ' PRIORIZACION ( EVENT_COD = 4 )
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    For rowCount = 0 To UBound(jsonEvent)
'     "Normal|2|||n54286|2023-09-22 18:40:04"
        Dim value As String: value = jsonEvent(rowCount)(1)
        Dim adjN As String: adjN = "null"
        Dim ignoreN As String: ignoreN = "null"
        Dim whoN As String: whoN = jsonEvent(rowCount)(4)
        Dim whenN As String: whenN = jsonEvent(rowCount)(5)
        
        Sql = Sql & sep & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_PriorizationCod & ",'" & whenN & "','" & whoN & "','" & value & "'," & adjN & "," & ignoreN & ",'" & t & "'"
        sep = vbNewLine & " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_priority_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyevent_volumen_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_VOLUMEN))
    Dim Sql As String: Sql = "" ' VOLUMEN ( EVENT_COD = 5 )
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    For rowCount = 0 To UBound(jsonEvent)
'       "0||||n54286|2023-09-22 18:40:13"
        Dim value As String: value = jsonEvent(rowCount)(0)
        Dim adjN As String: adjN = "null"
        Dim ignoreN As String: ignoreN = "null"
        Dim whoN As String: whoN = jsonEvent(rowCount)(4)
        Dim whenN As String: whenN = jsonEvent(rowCount)(5)
        
        Sql = Sql & sep & " SELECT '" & jsonDict(TOKEN_ENTRY_ID) & "','" & jsonDict(TOKEN_TASK_ID) & "'," & Athena_Event_VolumeCod & ",'" & whenN & "','" & whoN & "','" & value & "'," & adjN & "," & ignoreN & ",'" & t & "'"
        sep = vbNewLine & " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyevent_volumen_json = Sql
End Function

Private Function Athena_Token_get_ins_dutymatrix_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim Sql As String: Sql = "" ' VOLUMEN ( EVENT_COD = 5 )
    If jsonDict(TOKEN_UNIT) = UNIT_CROSS Then
        
        Sql = "DELETE FROM DUTY_MATRIX WHERE DUTY_COD = '" & jsonDict(TOKEN_TASK_ID) & "';"
        Sql = Sql & vbNewLine & " INSERT OR REPLACE INTO DUTY_MATRIX ( DUTY_COD, AREA_DEPT_CAT_COD, PORCENTAJE) "
        Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_MATRIX_CAT_PRCT))
        
        Dim sep As String: sep = ""
        Dim rowCount As Long
        
        For rowCount = 0 To UBound(jsonEvent)
    '       "2310|0.5"
            Dim area_dept_cat_cod As String: area_dept_cat_cod = jsonEvent(rowCount)(0)
            Dim prct As String: prct = jsonEvent(rowCount)(1)
            
            Sql = Sql & vbNewLine & sep & " SELECT '" & jsonDict(TOKEN_TASK_ID) & "'," & area_dept_cat_cod & "," & prct & " "
            sep = " UNION ALL "
        Next
        Sql = Sql & ";"
    End If
ErrHndlr:
    Athena_Token_get_ins_dutymatrix_json = Sql
End Function

Private Function Athena_Token_get_ins_dutyvar_json(jsonDict As Dictionary, t As String) As String
On Error GoTo ErrHndlr
    Dim Sql As String: Sql = ""
    
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_INDEX))
    Dim sep As String: sep = ""
    Dim rowCount As Long
    
    Sql = "DELETE FROM DUTY_VAR WHERE DUTY_COD = '" & jsonDict(TOKEN_TASK_ID) & "';"
    Sql = Sql & vbNewLine & " INSERT OR REPLACE INTO DUTY_VAR ( DUTY_COD, INDEX_COD, VALUE ) "
    
    For rowCount = 0 To UBound(jsonEvent)
'       "ISIN|000000000000001"
        Dim Index As String: Index = jsonEvent(rowCount)(0)
        Dim value As String: value = jsonEvent(rowCount)(1)
        
        Sql = Sql & vbNewLine & sep & " SELECT '" & jsonDict(TOKEN_TASK_ID) & "','" & Index & "','" & value & "' "
        sep = " UNION ALL "
    Next
ErrHndlr:
    If Err Then
        'Debug.Print Err
        Sql = ""
    End If
    Athena_Token_get_ins_dutyvar_json = Sql
End Function

Public Function getFormVarsFromToken(token As mailItem) As Variant
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    
    'LOGICA DE DRAFT/TOKEN
        'GLOBAL_TITLE_FULL, GLOBAL_NUM_ACTIONS, _
        'GLOBAL_AREA_COD, GLOBAL_COUNTRY_COD, GLOBAL_CATEGORY_COD, _
        'GLOBAL_TIME_ADJUST, GLOBAL_TIME_START, GLOBAL_TIME_END, _
        'GLOBAL_POSTPONED, GLOBAL_REASSIGNED, GLOBAL_USER_COD, GLOBAL_ORIGIN_COD, _
        'GLOBAL_AREA, GLOBAL_COUNTRY, GLOBAL_CATEGORY, GLOBAL_USER, GLOBAL_PRIORITY_COD, GLOBAL_PRIORITY, _
        'GLOBAL_MAIL_STAMP, GLOBAL_USER_EMPLOYEE, COMMENTS, GLOBAL_ORIGIN, GLOBAL_INC_OP, GLOBAL_NUM_ACTIONS_ERR
        'GLOBAL_PK, GLOBAL_TAG, GLOBAL_MATRIX_UNITS
        
    Dim formVars() As String: formVars = StringArray(jsonDict(TOKEN_TITLE), jsonDict(TOKEN_VOLUMEN), _
            jsonDict(TOKEN_AREA_COD), jsonDict(TOKEN_UNIT_COD), jsonDict(TOKEN_CAT_COD), _
            False, 0, 0, _
            True, True, jsonDict(TOKEN_OWNER_COD), jsonDict(TOKEN_ORIGIN_COD), _
            jsonDict(TOKEN_AREA), jsonDict(TOKEN_UNIT), jsonDict(TOKEN_CAT), jsonDict(TOKEN_OWNER), jsonDict(TOKEN_PRIORITY_COD), jsonDict(TOKEN_PRIORITY), _
            jsonDict(TOKEN_MAIL_STAMP), jsonDict(TOKEN_OWNER), jsonDict(TOKEN_COMMENT), jsonDict(TOKEN_ORIGIN), jsonDict(TOKEN_INCIDENT_OP), jsonDict(TOKEN_VOLUMEN_ERROR), _
            jsonDict(TOKEN_PK), "", "")
    
    getFormVarsFromToken = formVars
 
ErrHndlr:
    Set jsonDict = Nothing
End Function


Public Function getTotalTimeFromToken(token As mailItem) As Double
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary: Set jsonDict = Athena_cJSON.ParseJson(token.body)
    Dim jsonEvent As Variant: jsonEvent = Athena_Token_read_Events_JSON(jsonDict(TOKEN_EVENTS_STATUS))
    Dim rowCount As Integer
    Dim direction As Integer: direction = -1
    Dim total As Double: total = 0
    Dim stamp As String
    Dim statN As String
    Dim stampN As String
    
    ' Por cada entrada en el JSON
    For rowCount = 0 To UBound(jsonEvent)
        If VariantSize(jsonEvent(rowCount)) > 0 Then
            If VariantSize(jsonEvent(rowCount)) < 3 Or jsonEvent(rowCount)(3) = "" Then
                ' Recoger marcas
                statN = jsonEvent(rowCount)(0)
                stampN = jsonEvent(rowCount)(1)
                'Evento de Inicio
                If Athena_isTokenEvent_Status_Start(statN) Then
                    Select Case direction
                        Case -1:
                            direction = 1
                            stamp = stampN
                        Case 0: ' Cerrar marca
                            direction = 1
                            stamp = stampN
                        Case 1: ' Error
                    End Select
                'Evento de Parada
                Else
                    Select Case direction
                        Case -1: ' 1Âº registro >> IGNORA
                        Case 0:  ' PAUSA + PAUSA => IGNORAR
                        Case 1:  ' Cerrar marca
                            direction = 0
                            total = total + CalcTime(stamp, stampN)
                    End Select
                End If
            End If
        End If
    Next
ErrHndlr:
    getTotalTimeFromToken = total
    Set jsonDict = Nothing
End Function

'__________________________ PLANNED TOKEN ________________________

Function getPlannToken(inboxFolder As Outlook.Folder) As Outlook.mailItem
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary
    Dim objMail As Outlook.mailItem
    Dim item As Object
    ' *** Get Plann Stamp ***
    For Each item In inboxFolder.items
        If (TypeOf item Is Outlook.mailItem) Then
            Set objMail = item
            Exit For
        End If
    Next
    ' *** Get Stamp ***
    If objMail Is Nothing Then
        ' *** Prepare Draft ***
        Set objMail = Outlook.Application.CreateItem(olMailItem).Move(inboxFolder)
        Set jsonDict = New Dictionary
        jsonDict.CompareMode = TextCompare
        objMail.BodyFormat = olFormatRichText
        objMail.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
        objMail.Save
    End If
    Set getPlannToken = objMail
ErrHndlr:
    Set jsonDict = Nothing
    Set item = Nothing
    Set objMail = Nothing
End Function

Function getPlannTokenField(objMail As Outlook.mailItem, field As String) As String
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary
    ' *** Read Structure ***
    If Not objMail Is Nothing Then
        Set jsonDict = Athena_cJSON.ParseJson(objMail.body)
        If jsonDict.Exists(field) Then getPlannTokenField = jsonDict(field)
    End If
ErrHndlr:
    Set jsonDict = Nothing
End Function

Sub setPlannToken(objMail As Outlook.mailItem, isFinished As Boolean, usrName As String, tStamp As String)
On Error GoTo ErrHndlr
    Dim jsonDict As Dictionary
    ' *** Update Structure ***
    If Not objMail Is Nothing Then
        Set jsonDict = Athena_cJSON.ParseJson(objMail.body)
        If Not isFinished Then
            ' *** Update Init ***
            If Not jsonDict.Exists(TOKEN_INIT_UPDATE_STAMP) Then jsonDict.Add TOKEN_INIT_UPDATE_STAMP, tStamp
            jsonDict(TOKEN_INIT_UPDATE_STAMP) = tStamp
        Else
            ' *** Update End ***
            If Not jsonDict.Exists(TOKEN_LAST_UPDATE_STAMP) Then jsonDict.Add TOKEN_LAST_UPDATE_STAMP, tStamp
            jsonDict(TOKEN_LAST_UPDATE_STAMP) = tStamp
        End If
        
        ' *** Other Fields ***
        objMail.SentOnBehalfOfName = usrName 'getUserName(getUserLogin)
        objMail.Subject = "Planificadas_" & tStamp 'Format(Now, Athena_FullTime_Pattern)
        objMail.BodyFormat = olFormatRichText
        
        objMail.body = Athena_cJSON.ConvertToJson(jsonDict, " ")
        
        objMail.Save
    End If
ErrHndlr:
    Set jsonDict = Nothing
End Sub

Function isPlannTokenRunning(objMail As Outlook.mailItem) As Boolean
On Error GoTo ErrHndlr
    Dim tInit As String
    Dim tEnd As String
    Dim isRunning As Boolean: isRunning = False
    ' *** If Token exists ***
    If Not objMail Is Nothing Then
        tInit = getPlannTokenField(objMail, TOKEN_INIT_UPDATE_STAMP)
        tEnd = getPlannTokenField(objMail, TOKEN_LAST_UPDATE_STAMP)
        ' *** Has value (Both) & Init >= Last ***
        If tInit <> "" And tInit >= tEnd Then isRunning = True
    End If
ErrHndlr:
    isPlannTokenRunning = isRunning
End Function

Function getPlannTokenLastTime(objMail As Outlook.mailItem) As String
On Error GoTo ErrHndlr
    Dim tEnd As String: tEnd = "00:00"
    Dim tDay As String: tDay = Format(Now, Athena_FullDate_Pattern) ' YYYY-MM-DD
    ' *** If Token exists ***
    If Not objMail Is Nothing Then
        tEnd = getPlannTokenField(objMail, TOKEN_LAST_UPDATE_STAMP)
        ' *** Has value & Today ***
        If tEnd <> "" Then
            If tDay = Split(tEnd, " ")(0) Then tEnd = Left(Split(tEnd, " ")(1), 5)
        End If
    End If
ErrHndlr:
    If Len(tEnd) <> 5 Then tEnd = "00:00"
    getPlannTokenLastTime = tEnd
End Function
